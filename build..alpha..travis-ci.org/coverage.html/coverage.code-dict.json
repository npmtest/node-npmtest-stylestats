{"/home/travis/build/npmtest/node-npmtest-stylestats/test.js":"/* istanbul instrument in package npmtest_stylestats */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-stylestats/lib.npmtest_stylestats.js":"/* istanbul instrument in package npmtest_stylestats */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_stylestats = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_stylestats = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-stylestats/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-stylestats && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_stylestats */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_stylestats\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_stylestats.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        local.assetsDict['/assets.npmtest_stylestats.rollup.js'] =\n            local.assetsDict['/assets.npmtest_stylestats.rollup.js'] ||\n            local.fs.readFileSync(\n                // buildCustomOrg-hack\n                local.npmtest_stylestats.__dirname +\n                    '/lib.npmtest_stylestats.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-stylestats/node_modules/stylestats/lib/stylestats.js":"const fs = require('fs');\nconst path = require('path');\nconst glob = require('glob');\nconst validUrl = require('valid-url');\nconst util = require('./util');\nconst prettify = require('./prettify');\nconst Parser = require('./parser');\nconst Analyzer = require('./analyzer');\n\nclass StyleStats {\n  /**\n   * @param {Array} args\n   * @param {String|Object} config\n   */\n  constructor(args, config) {\n    args = Array.isArray(args) ? args : [args];\n    this.urls = [];\n    this.files = [];\n    this.styles = [];\n    const EXTENSIONS = ['.css'];\n\n    // Check arguments which is url or file path or other\n    args.forEach(arg => {\n      if (util.isFile(arg) && EXTENSIONS.indexOf(path.extname(arg)) !== -1) {\n        this.files.push(arg);\n      } else if (util.isDirectory(arg)) {\n        fs.readdirSync(arg).filter(file => {\n          return (EXTENSIONS.indexOf(path.extname(file)) !== -1);\n        }).forEach(file => {\n          this.files.push(arg + file);\n        });\n      } else if (validUrl.isUri(arg)) {\n        this.urls.push(arg);\n      } else if (util.isCSS(arg)) {\n        this.styles.push(arg);\n      } else {\n        glob.sync(arg).filter(file => {\n          return (path.extname(file) === '.css');\n        }).forEach(file => {\n          this.files.push(file);\n        });\n      }\n    });\n\n    const defaultOptions = require('../assets/default.json');\n    let customOptions = {};\n    if (config && util.isFile(config)) {\n      const configString = fs.readFileSync(config, {\n        encoding: 'utf8'\n      });\n      try {\n        customOptions = JSON.parse(configString);\n      } catch (err) {\n        throw err;\n      }\n    } else if (util.isObject(config)) {\n      customOptions = config;\n    }\n\n    this.options = Object.assign({}, defaultOptions, customOptions);\n    this.parser = new Parser(this.urls, this.files, this.styles, this.options);\n  }\n\n  /**\n   * Parse CSS\n   * @returns {Promise}\n   */\n  parse() {\n    return new Promise((resolve, reject) => {\n      this.parser.parse().then(data => {\n        const analyzedData = new Analyzer(data, this.options).analyze();\n\n        const stats = {};\n        if (this.options.published) {\n          stats.published = new Date();\n        }\n        if (this.options.paths) {\n          stats.paths = [];\n          Array.prototype.push.apply(stats.paths, this.files);\n          Array.prototype.push.apply(stats.paths, this.urls);\n        }\n        if (this.options.stylesheets) {\n          stats.stylesheets = this.files.length + data.cssFiles - 0;\n        }\n        if (this.options.styleElements) {\n          stats.styleElements = data.styleElements;\n        }\n        Object.assign(stats, analyzedData);\n        if (this.options.mediaQueries) {\n          stats.mediaQueries = data.mediaQueries;\n        }\n        resolve(stats);\n      }).catch(err => reject(err));\n    });\n  }\n\n  /**\n   * Prettify CSS\n   * @param {Object} stats\n   * @returns {Object}\n   */\n  prettify(stats) {\n    return prettify(stats);\n  }\n}\n\nmodule.exports = StyleStats;\n","/home/travis/build/npmtest/node-npmtest-stylestats/node_modules/stylestats/lib/util.js":"const fs = require('fs');\nconst css = require('css');\n\nconst utils = {\n  /**\n   * Argument is file path or not\n   * @param {String} file\n   * @returns {Boolean}\n   */\n  isFile: file => {\n    try {\n      return fs.existsSync(file) && fs.statSync(file).isFile();\n    } catch (err) {\n      return false;\n    }\n  },\n  /**\n   * Argument is directory path or not\n   * @param {String} dir\n   * @returns {Boolean}\n   */\n  isDirectory: dir => {\n    try {\n      return fs.existsSync(dir) && fs.statSync(dir).isDirectory();\n    } catch (err) {\n      return false;\n    }\n  },\n  /**\n   * Argument is CSS or not\n   * @param {String} str\n   * @returns {Boolean}\n   */\n  isCSS: str => {\n    try {\n      return css.parse(str) instanceof Object;\n    } catch (err) {\n      return false;\n    }\n  },\n  isFunction: fn => {\n    return typeof fn === 'function' || false;\n  },\n  isObject: obj => {\n    const type = typeof obj;\n    return type === 'function' || ((type === 'object') && Boolean(obj));\n  }\n};\n\nmodule.exports = utils;\n","/home/travis/build/npmtest/node-npmtest-stylestats/node_modules/stylestats/lib/prettify.js":"const moment = require('moment');\nconst numeral = require('numeral');\nconst aliases = require('../assets/aliases.json');\n\nconst KEY_BYTE = [\n  'size',\n  'gzippedSize',\n  'dataUriSize'\n];\nconst KEY_PERCENT = [\n  'simplicity',\n  'ratioOfDataUriSize'\n];\nconst KEY_NUMBER = [\n  'averageOfCohesion',\n  'averageOfIdentifier'\n];\n\n/**\n * Prettify StyleStats data.\n * @param {object} [result] StyleStats parse data. Required.\n * @return {object} prettified data.\n */\nfunction prettify(result) {\n  const collection = {};\n\n  Object.keys(result).forEach(key => {\n    const readableKey = aliases[key];\n    let value = result[key];\n\n    if (key === 'published') {\n      value = moment(value).format('LLL');\n    }\n    if (key === 'propertiesCount') {\n      const array = [];\n      value.forEach(item => {\n        array.push([item.property, item.count]);\n      });\n      if (array.length !== 0) {\n        value = array.join('\\n').replace(/,/g, ': ');\n      }\n    }\n    if (KEY_BYTE.indexOf(key) !== -1) {\n      value = numeral(value).format('0.0b').replace(/^0\\.0B$/, '0');\n    }\n    if (KEY_PERCENT.indexOf(key) !== -1) {\n      value = numeral(value).format('0.0%').replace(/^0\\.0%$/, '0');\n    }\n    if (KEY_NUMBER.indexOf(key) !== -1) {\n      value = numeral(value).format('0.000');\n    }\n    if (Array.isArray(value)) {\n      const maxLen = 64;\n      value = value.map(val => {\n        if (val.length > maxLen) {\n          return `${val.substring(0, maxLen)}...`;\n        }\n        return val;\n      });\n      value = value.join('\\n') === '' ? 'N/A' : value.join('\\n');\n    }\n    collection[readableKey] = value;\n  });\n\n  return collection;\n}\n\nmodule.exports = prettify;\n","/home/travis/build/npmtest/node-npmtest-stylestats/node_modules/stylestats/lib/parser.js":"const fs = require('fs');\nconst url = require('url');\nconst path = require('path');\nconst css = require('css');\nconst request = require('request');\nconst cheerio = require('cheerio');\nconst util = require('./util');\n\n/**\n * Get promised request\n * @param {Object} options\n * @returns {Promise}\n */\nfunction requestPromise(options) {\n  return new Promise((resolve, reject) => {\n    request(options, (error, response) => {\n      if (!error && response.statusCode === 200) {\n        resolve(response);\n      } else if (error) {\n        reject(error);\n      } else {\n        reject(new Error(`Status code is ${response.statusCode}`));\n      }\n    });\n  });\n}\n\nclass Parser {\n  /**\n   * @param {Array} urls\n   * @param {Array} files\n   * @param {Array} styles\n   */\n  constructor(urls, files, styles, options) {\n    this.urls = urls;\n    this.files = files;\n    this.styles = styles;\n    this.options = options;\n\n    this.cssFiles = [];\n\n    this.files.forEach(function (file) {\n      const extname = path.extname(file);\n      switch (extname) {\n        case '.css':\n          this.cssFiles.push(file);\n          break;\n        default:\n          break;\n      }\n    }, this);\n  }\n\n  /**\n   * Parse css data\n   * @returns {Promise}\n   */\n  parse() {\n    // Object to return\n    const parsedData = {\n      cssString: '',\n      cssSize: 0,\n      styleElements: 0,\n      mediaQueries: 0,\n      cssFiles: 0,\n      rules: [],\n      selectors: [],\n      declarations: []\n    };\n\n    const that = this;\n\n    // Remote file requests\n    const requestPromises = [];\n    this.urls.forEach(url => {\n      const options = that.options.requestOptions;\n      options.url = url;\n      options.gzip = true;\n      requestPromises.push(requestPromise(options));\n    });\n\n    // CSS string array from arguments\n    // They will be joined into css string\n    this.cssFiles.forEach(cssFile => {\n      // Push local css data\n      that.styles.push(fs.readFileSync(cssFile, {\n        encoding: 'utf8'\n      }));\n    });\n\n    return new Promise((resolve, reject) => {\n      // Get remote files\n      Promise.all(requestPromises).then(results => {\n        if (that.urls.length > 0 && that.files.length > 0 && that.styles.length > 0) {\n          throw new Error('Argument is invalid');\n        }\n\n        // Requests to stylesheet defined in html\n        const requestPromisesInner = [];\n\n        results.forEach(result => {\n          if (util.isCSS(result)) {\n            that.styles.push(result);\n          } else {\n            // Push remote css data\n            const type = result.headers['content-type'];\n            if (type.indexOf('html') > -1) {\n              // Parse result body\n              const $ = cheerio.load(result.body);\n              const $link = $('link[rel=stylesheet]');\n              const $style = $('style');\n\n              // Add css file count\n              parsedData.cssFiles += $link.length;\n              parsedData.styleElements += $style.length;\n\n              // Request link[href]\n              $link.each(function () {\n                const relativePath = $(this).attr('href');\n                const absolutePath = url.resolve(result.request.href, relativePath);\n                const options = that.options.requestOptions;\n                options.url = absolutePath;\n                requestPromisesInner.push(requestPromise(options));\n              });\n\n              // Add text in style tags\n              $style.each(function () {\n                that.styles.push($(this).text());\n              });\n            } else if (type.indexOf('css') === -1) {\n              throw new Error('Content type is not HTML or CSS!');\n            } else {\n              parsedData.cssFiles += 1;\n              that.styles.push(result.body);\n            }\n          }\n        });\n\n        if (requestPromisesInner.length > 0) {\n          return Promise.all(requestPromisesInner);\n        }\n        return true;\n      }).then(results => {\n        if (Array.isArray(results)) {\n          results.forEach(result => {\n            that.styles.push(result.body);\n          });\n        }\n\n        // Join all css string\n        parsedData.cssString = that.styles.join('');\n        parsedData.cssSize = Buffer.byteLength(parsedData.cssString, 'utf8');\n\n        // Parse css string\n        let rawRules = [];\n\n        try {\n          rawRules = css.parse(parsedData.cssString).stylesheet.rules;\n        } catch (error) {\n          throw new Error(error);\n        }\n\n        // Check number of rules\n        if (rawRules[0] === undefined) {\n          throw new Error('Rule is not found.');\n        }\n\n        // Add rules into result\n        rawRules.forEach(rule => {\n          if (rule.type === 'rule') {\n            parsedData.rules.push(rule);\n          } else if (rule.type === 'media') {\n            parsedData.mediaQueries += 1;\n            rule.rules.forEach(rule => {\n              if (rule.type === 'rule') {\n                parsedData.rules.push(rule);\n              }\n            });\n          }\n        });\n\n        // Add selectors and declarations into result\n        parsedData.rules.forEach(rule => {\n          rule.selectors.forEach(selector => {\n            parsedData.selectors.push(selector);\n          });\n          rule.declarations.forEach(declaration => {\n            if (declaration.type === 'declaration') {\n              parsedData.declarations.push(declaration);\n            }\n          });\n        });\n        resolve(parsedData);\n      }).catch(error => reject(error));\n    });\n  }\n}\n\nmodule.exports = Parser;\n","/home/travis/build/npmtest/node-npmtest-stylestats/node_modules/stylestats/lib/analyzer.js":"const gzipSize = require('gzip-size');\n\nclass Analyzer {\n  /**\n   * @param {Array} rules\n   * @param {Array} selectors\n   * @param {Array} declarations\n   * @param {String} cssString\n   * @param {Number} cssSize\n   * @param {Object} options\n   */\n  constructor(data, options) {\n    // Array of rule\n    // Referenced in analyzeRules\n    this.rules = data.rules;\n\n    // Array of css selector\n    // Referenced in analyzeSelectors\n    this.selectors = data.selectors;\n\n    // Array of css declaration\n    // Referenced in analyzeDeclarations\n    this.declarations = data.declarations;\n\n    // All of css string\n    this.cssString = data.cssString;\n\n    // Size of css\n    this.cssSize = data.cssSize;\n\n    // Result options\n    this.options = options;\n  }\n\n  /**\n   * Analyze rules\n   * @returns {\n   *   {Number} totalCssDeclarations,\n   *   {Array} cssDeclarations\n   * }\n   */\n  analyzeRules() {\n    // Object to return\n    const result = {\n      totalCssDeclarations: 0,\n      cssDeclarations: []\n    };\n\n    // Analyze rules\n    this.rules.forEach(rule => {\n      if (Array.isArray(rule.declarations)) {\n        result.cssDeclarations.push({\n          selector: rule.selectors,\n          count: rule.declarations.length\n        });\n      }\n    });\n\n    // Sort by css declaration count\n    result.cssDeclarations.sort((a, b) => {\n      return b.count - a.count;\n    });\n    result.cssDeclarations.forEach(obj => {\n      result.totalCssDeclarations += obj.count;\n    });\n\n    return result;\n  }\n\n  /**\n   * Analyze selectors\n   * @returns {\n   *   {Number} idSelectors,\n   *   {Number} universalSelectors,\n   *   {Number} unqualifiedAttributeSelectors,\n   *   {Number} javascriptSpecificSelectors,\n   *   {Number} totalIdentifiers,\n   *   {Array} identifiers\n   * }\n   */\n  analyzeSelectors() {\n    // Object to return\n    const result = {\n      idSelectors: 0,\n      universalSelectors: 0,\n      unqualifiedAttributeSelectors: 0,\n      javascriptSpecificSelectors: 0,\n      userSpecifiedSelectors: 0,\n      totalIdentifiers: 0,\n      identifiers: []\n    };\n\n    // Specified JavaScript hook selector\n    const regexpJs = new RegExp(this.options.javascriptSpecificSelectors);\n    // Specified user-specified hook selector\n    const regexpUser = new RegExp(this.options.userSpecifiedSelectors);\n\n    // Analyze selectors\n    this.selectors.forEach(selector => {\n      // If it contains # and dose not contain # in attribute selector\n      if (selector.indexOf('#') > -1) {\n        const id = selector.replace(/\\[.+]/g, '');\n        if (id.indexOf('#') > -1) {\n          result.idSelectors += 1;\n        }\n      }\n\n      // If it contains * and dose not contain * in attribute selector\n      if (selector.indexOf('*') > -1) {\n        const universal = selector.replace(/\\[.+]/g, '');\n        if (universal.indexOf('*') > -1) {\n          result.universalSelectors += 1;\n        }\n      }\n\n      // If it is unqualified attribute selector\n      if (selector.trim().match(/\\[.+]$/g)) {\n        result.unqualifiedAttributeSelectors += 1;\n      }\n\n      // If it is for JavaScript hook\n      if (regexpJs.test(selector.trim())) {\n        result.javascriptSpecificSelectors += 1;\n      }\n\n      // If it is for user-specified hook\n      if (regexpUser.test(selector.trim())) {\n        result.userSpecifiedSelectors += 1;\n      }\n\n      // Add selector for statistics\n      let trimmedSelector = selector.replace(/\\s?([>|+|~])\\s?/g, '$1');\n      trimmedSelector = trimmedSelector.replace(/\\s+/g, ' ');\n      const count = trimmedSelector.split(/\\s|>|\\+|~|:|[\\w\\]]\\.|[\\w\\]]#|\\[/).length;\n      result.identifiers.push({\n        selector,\n        count\n      });\n    });\n    result.identifiers.forEach(obj => {\n      result.totalIdentifiers += obj.count;\n    });\n\n    // Sort by chained selector count\n    result.identifiers.sort((a, b) => {\n      return b.count - a.count;\n    });\n\n    return result;\n  }\n\n  /**\n   * Analyze declarations\n   * @returns {\n   *   {String} dataUriSize,\n   *   {Number} importantKeywords,\n   *   {Number} floatProperties,\n   *   {Array} uniqueFontSizes,\n   *   {Array} uniqueFontFamilies\n   *   {Array} uniqueColors,\n   *   {Object} properties\n   * }\n   */\n  analyzeDeclarations() {\n    // Object to return\n    const result = {\n      dataUriSize: '',\n      importantKeywords: 0,\n      floatProperties: 0,\n      uniqueFontSizes: [],\n      uniqueFontFamilies: [],\n      uniqueColors: [],\n      uniqueBackgroundImages: [],\n      properties: {}\n    };\n\n    // Analyze declarations\n    this.declarations.forEach(declaration => {\n      // If it contains DataURI\n      if (declaration.value.indexOf('data:image') > -1) {\n        result.dataUriSize += declaration.value.match(/data:image\\/[A-Za-z0-9;,+=/]+/);\n      }\n\n      // If it contains !important keyword\n      if (declaration.value.indexOf('!important') > -1) {\n        result.importantKeywords += 1;\n      }\n\n      // If it contains float\n      if (declaration.property.indexOf('float') > -1) {\n        result.floatProperties += 1;\n      }\n\n      // If it contains font-family\n      if (declaration.property.indexOf('font-family') > -1) {\n        result.uniqueFontFamilies.push(declaration.value.replace(/(!important)/g, '').trim());\n      }\n\n      // If it contains font-size\n      if (declaration.property.indexOf('font-size') > -1) {\n        result.uniqueFontSizes.push(declaration.value.replace(/!important/, '').trim());\n      }\n\n      // If it contains colors\n      if (declaration.property.match(/^color$/)) {\n        let color = declaration.value.replace(/!important/, '');\n        color = color.toUpperCase().trim();\n        result.uniqueColors.push(color);\n      }\n\n      // If it contains background-image url()\n      if (declaration.property.indexOf('background') > -1 && declaration.value.indexOf('url') > -1) {\n        const paths = declaration.value.match(/url\\(([^)]+)\\)/g);\n        if (paths) {\n          paths.forEach(path => {\n            result.uniqueBackgroundImages.push(path.replace(/^url|[()'\"]/g, ''));\n          });\n        }\n      }\n\n      // Property statistics\n      if (result.properties[declaration.property]) {\n        result.properties[declaration.property] += 1;\n      } else {\n        result.properties[declaration.property] = 1;\n      }\n    });\n\n    // Return byte size.\n    result.dataUriSize = Buffer.byteLength(result.dataUriSize, 'utf8');\n\n    // Sort `font-family` property.\n    result.uniqueFontFamilies = result.uniqueFontFamilies.filter((fontFamily, index, array) => {\n      return array.indexOf(fontFamily) === index;\n    }).sort();\n\n    // Sort `font-size` property.\n    result.uniqueFontSizes = result.uniqueFontSizes.filter((fontSize, index, array) => {\n      return array.indexOf(fontSize) === index;\n    }).sort((a, b) => {\n      return Number(a.replace(/[^0-9.]/g, '')) - Number(b.replace(/[^0-9.]/g, ''));\n    });\n    // Categorize per unit and concat\n    const uniqueFontSizes = {};\n    result.uniqueFontSizes.forEach(value => {\n      const unit = value.replace(/[0-9.]/g, '');\n      if (!uniqueFontSizes[unit]) {\n        uniqueFontSizes[unit] = [];\n      }\n      uniqueFontSizes[unit].push(value);\n    });\n    result.uniqueFontSizes = [];\n    Object.keys(uniqueFontSizes).forEach(key => {\n      uniqueFontSizes[key].forEach(value => {\n        result.uniqueFontSizes.push(value);\n      });\n    });\n\n    // Sort `color` property.\n    const trimmedColors = result.uniqueColors.filter(uniqueColor => {\n      return uniqueColor !== 'TRANSPARENT' && uniqueColor !== 'INHERIT';\n    });\n\n    const formattedColors = trimmedColors.map(color => {\n      let formattedColor = color;\n      if (/^#([0-9A-F]){3}$/.test(formattedColor)) {\n        formattedColor = color.replace(/^#(\\w)(\\w)(\\w)$/, '#$1$1$2$2$3$3');\n      }\n      return formattedColor;\n    });\n    result.uniqueColors = formattedColors.filter((formattedColor, index, array) => {\n      return array.indexOf(formattedColor) === index;\n    }).sort();\n\n    // If it contains background-image url()\n    result.uniqueBackgroundImages = result.uniqueBackgroundImages.filter((backgroundImage, index, array) => {\n      return array.indexOf(backgroundImage) === index;\n    }).sort();\n\n    // Sort properties count.\n    const propertiesCount = [];\n    Object.keys(result.properties).forEach(key => {\n      propertiesCount.push({\n        property: key,\n        count: result.properties[key]\n      });\n    });\n\n    // Sort by property count\n    result.properties = propertiesCount.sort((a, b) => {\n      return b.count - a.count;\n    });\n\n    return result;\n  }\n\n  /**\n   * Analyze css from rules, selectors, declarations\n   * @returns {\n   *   {Number} stylesheets,\n   *   {Number} size,\n   *   {Number} dataUriSize,\n   *   {Number} ratioOfDataUriSize,\n   *   {Number} gzippedSize,\n   *   {Number} rules,\n   *   {Number} selectors,\n   *   {Float}  simplicity,\n   *   {Number} averageOfIdentifier,\n   *   {Number} mostIdentifier,\n   *   {String} mostIdentifierSelector,\n   *   {Number} averageOfCohesion,\n   *   {Number} lowestCohesion,\n   *   {Number} lowestCohesionSelector,\n   *   {Number} totalUniqueFontSizes,\n   *   {String} uniqueFontSizes,\n   *   {Number} totalUniqueFontFamilies,\n   *   {String} uniqueFontSizes,\n   *   {Number} totalUniqueColors,\n   *   {String} uniqueColors,\n   *   {Number} totalUniqueFontFamilies\n   *   {String} uniqueFontFamilies,\n   *   {Number} totalUniqueBackgroundImages\n   *   {String} uniqueBackgroundImages,\n   *   {Number} idSelectors,\n   *   {Number} universalSelectors,\n   *   {Number} unqualifiedAttributeSelectors,\n   *   {Number} javascriptSpecificSelectors,\n   *   {Number} importantKeywords,\n   *   {Number} floatProperties,\n   *   {Number} propertiesCount\n   * }\n   */\n  analyze() {\n    // Get analytics\n    const ruleAnalysis = this.analyzeRules();\n    const selectorAnalysis = this.analyzeSelectors();\n    const declarationAnalysis = this.analyzeDeclarations();\n\n    const analysis = {};\n    if (this.options.size) {\n      analysis.size = this.cssSize;\n    }\n    if (this.options.dataUriSize) {\n      analysis.dataUriSize = declarationAnalysis.dataUriSize;\n    }\n    if (this.options.dataUriSize) {\n      analysis.ratioOfDataUriSize = declarationAnalysis.dataUriSize / this.cssSize;\n    }\n    if (this.options.gzippedSize) {\n      analysis.gzippedSize = gzipSize.sync(this.cssString);\n    }\n    if (this.options.rules) {\n      analysis.rules = this.rules.length;\n    }\n    if (this.options.selectors) {\n      analysis.selectors = this.selectors.length;\n    }\n    if (this.options.declarations) {\n      analysis.declarations = this.declarations.length;\n    }\n    if (this.options.simplicity) {\n      const simplicity = analysis.rules / this.selectors.length;\n      analysis.simplicity = isNaN(simplicity) ? 0 : simplicity;\n    }\n    if (this.selectors.length > 0 && this.options.averageOfIdentifier) {\n      analysis.averageOfIdentifier = selectorAnalysis.totalIdentifiers / this.selectors.length;\n    }\n    // Most Identifier\n    const mostIdentifier = selectorAnalysis.identifiers.shift();\n    if (mostIdentifier && this.options.mostIdentifier) {\n      analysis.mostIdentifier = mostIdentifier.count;\n    }\n    if (mostIdentifier && this.options.mostIdentifierSelector) {\n      analysis.mostIdentifierSelector = mostIdentifier.selector;\n    }\n    if (this.rules.length > 0 && this.options.averageOfCohesion) {\n      analysis.averageOfCohesion = ruleAnalysis.totalCssDeclarations / this.rules.length;\n    }\n    const lowestDefinition = ruleAnalysis.cssDeclarations.shift();\n    if (lowestDefinition && this.options.lowestCohesion) {\n      analysis.lowestCohesion = lowestDefinition.count;\n    }\n    if (lowestDefinition && this.options.lowestCohesionSelector) {\n      analysis.lowestCohesionSelector = lowestDefinition.selector;\n    }\n    if (this.options.totalUniqueFontSizes) {\n      analysis.totalUniqueFontSizes = declarationAnalysis.uniqueFontSizes.length;\n    }\n    if (this.options.uniqueFontSizes) {\n      analysis.uniqueFontSizes = declarationAnalysis.uniqueFontSizes;\n    }\n    if (this.options.totalUniqueFontFamilies) {\n      analysis.totalUniqueFontFamilies = declarationAnalysis.uniqueFontFamilies.length;\n    }\n    if (this.options.uniqueFontFamilies) {\n      analysis.uniqueFontFamilies = declarationAnalysis.uniqueFontFamilies;\n    }\n    if (this.options.totalUniqueColors) {\n      analysis.totalUniqueColors = declarationAnalysis.uniqueColors.length;\n    }\n    if (this.options.uniqueColors) {\n      analysis.uniqueColors = declarationAnalysis.uniqueColors;\n    }\n    if (this.options.totalUniqueBackgroundImages) {\n      analysis.totalUniqueBackgroundImages = declarationAnalysis.uniqueBackgroundImages.length;\n    }\n    if (this.options.uniqueBackgroundImages) {\n      analysis.uniqueBackgroundImages = declarationAnalysis.uniqueBackgroundImages;\n    }\n    if (this.options.idSelectors) {\n      analysis.idSelectors = selectorAnalysis.idSelectors;\n    }\n    if (this.options.universalSelectors) {\n      analysis.universalSelectors = selectorAnalysis.universalSelectors;\n    }\n    if (this.options.unqualifiedAttributeSelectors) {\n      analysis.unqualifiedAttributeSelectors = selectorAnalysis.unqualifiedAttributeSelectors;\n    }\n    if (this.options.javascriptSpecificSelectors) {\n      analysis.javascriptSpecificSelectors = selectorAnalysis.javascriptSpecificSelectors;\n    }\n    if (this.options.userSpecifiedSelectors) {\n      analysis.userSpecifiedSelectors = selectorAnalysis.userSpecifiedSelectors;\n    }\n    if (this.options.importantKeywords) {\n      analysis.importantKeywords = declarationAnalysis.importantKeywords;\n    }\n    if (this.options.floatProperties) {\n      analysis.floatProperties = declarationAnalysis.floatProperties;\n    }\n    if (this.options.propertiesCount) {\n      analysis.propertiesCount = declarationAnalysis.properties.slice(0, this.options.propertiesCount);\n    }\n    return analysis;\n  }\n}\n\nmodule.exports = Analyzer;\n","/home/travis/build/npmtest/node-npmtest-stylestats/node_modules/stylestats/lib/format.js":"const Table = require('cli-table');\nconst json2csv = require('json2csv');\n\nclass Format {\n  constructor(result) {\n    this.result = result;\n  }\n\n  toJSON() {\n    return JSON.stringify(this.result, null, 2);\n  }\n\n  toCSV() {\n    const data = this.result;\n    Object.keys(data).forEach(key => {\n      if (key === 'propertiesCount') {\n        const array = [];\n        data[key].forEach(item => {\n          array.push([`${item.property}:${item.count}`]);\n        });\n        data[key] = array;\n      }\n      if (Array.isArray(data[key])) {\n        data[key] = data[key].join(' ');\n      }\n    });\n    return new Promise((resolve, reject) => {\n      json2csv({data, fields: Object.keys(data)}, (error, csv) => {\n        if (error) {\n          reject(error);\n          return;\n        }\n        resolve(csv);\n      });\n    });\n  }\n\n  toTable() {\n    const table = new Table({\n      style: {\n        head: ['cyan'],\n        compact: false\n      }\n    });\n    const data = this.result;\n    Object.keys(data).forEach(key => {\n      const row = {};\n      row[key] = data[key];\n      table.push(row);\n    });\n    return table.toString();\n  }\n}\n\nmodule.exports = Format;\n"}